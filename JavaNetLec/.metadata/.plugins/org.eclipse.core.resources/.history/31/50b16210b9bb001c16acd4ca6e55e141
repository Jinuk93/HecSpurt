package thread.ex06.threadjoin;

class Sum implements Runnable{

	int num=0;
	int start, end;
	
	Sum(int start, int end){
		this.start = start;
		this.end = end;
	}
	
	@Override
	public void run() {
		for(int i=start;i<=end;i++)
			num += i;
	}
	
	public int getNum() {
		return this.num;
	}	
}

public class ThreadJoin {
	public static void main(String[] args) throws InterruptedException {
		Sum sum0 = new Sum(1, 50);
		Sum sum1 = new Sum(51, 100);
		
		Thread t0 = new Thread(sum0);
		Thread t1 = new Thread(sum1);
		t0.start();
		t1.start();
		
		// t0/t1스레드의 동작이 마칠때까지 대기한다
		/*
		1번째 sleep으로 대략 대기시간을 준다.
		하지만, 예상할 수 있는 최대시간을 줘야 하므로
		성능이 좋지 못하다
		*/
		/*
		try {
			Thread.sleep(10);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		*/
		
		/*
		2번째 스레드 객체내의 run()이 리턴하면 jvm은 신호를 받게 된다.
		이 신호를 대기하는 join()을 사용하면 된다.
		main스레드는 join()에서 신호가 올때까지 대기상태
		*/
		t0.join();
		t1.join();
		System.out.println("1~100 = 하" + (sum0.getNum()+sum1.getNum()));
	}
}










