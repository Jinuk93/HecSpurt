package thread.ex11.syncthread;

class Anum{
	int accuNum = 0;
	int diffNum = 0;

	void accumulate(int val) {
		accuNum += val;
	}
	
	void calcDiff(int val) {
		diffNum -= val;
	}
}

class Sum implements Runnable{
	Anum aNum;
	int start, end;
	
	Sum(Anum aNum, int start, int end){
		this.aNum = aNum;
		this.start = start;
		this.end = end;
	}

	@Override
	public void run() {
		for(int i=start;i<=end;i++)
			aNum.accumulate(i);
	}	
}

class Minus implements Runnable{
	Anum aNum;
	int start, end;
	
	Minus(Anum aNum, int start, int end){
		this.aNum = aNum;
		this.start = start;
		this.end = end;
	}

	@Override
	public void run() {
		for(int i=start;i<=end;i++)
			aNum.calcDiff(i);
	}	
}

public class SyncThread {
	public static void main(String[] args) throws InterruptedException {
		Anum aNum = new Anum();
		
		// 누적합을 구하기 위한 스레드
		Sum sum0 = new Sum(aNum, 1, 5000);
		Sum sum1 = new Sum(aNum, 5001, 10000);
		Thread t0 = new Thread(sum0);
		Thread t1 = new Thread(sum1);
		
		// 누적차를 구하기 위한 스레드
		Minus minus0 = new Minus(aNum, 1, 5000);
		Minus minus1 = new Minus(aNum, 5001, 10000);
		Thread t2 = new Thread(minus0);
		Thread t3 = new Thread(minus1);
		
		t0.start();
		t1.start();
		
		t0.join();
		t1.join();
		
		System.out.println("1~100 accum = " + aNum.num);
	}
}












